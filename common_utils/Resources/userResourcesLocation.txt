'use strict';

// ----------------------------------------------------------------------------------------------------------------- //

// /**
//  * the "Grabber"
//  * @author K-mik@Z
//  * Try to optimize loading fonts
//  */

function asyncGeneratorStep(e,r,n,t,a,o,c){try{var u=e[o](c),s=u.value}catch(e){return void n(e)}u.done?r(s):Promise.resolve(s).then(t,a)}function _asyncToGenerator(u){return function(){var e=this,c=arguments;return new Promise(function(r,n){function t(e){asyncGeneratorStep(o,r,n,t,a,"next",e)}function a(e){asyncGeneratorStep(o,r,n,t,a,"throw",e)}var o=u.apply(e,c);t(void 0)})}}var grab=function(){var r=_asyncToGenerator(regeneratorRuntime.mark(function e(r){var n,t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(r);case 2:if((n=e.sent).ok)return e.next=6,n.text();e.next=10;break;case 6:return t=e.sent,e.abrupt("return",t);case 10:console.log("HTTP-Error: "+n.status);case 11:case"end":return e.stop()}},e)}));return function(e){return r.apply(this,arguments)}}()();


// ----------------------------------------------------------------------------------------------------------------- //

// /**
// * Nano Core 2 - An adblocker
// * Copyright (C) 2018-2019  Nano Core 2 contributors
// * for the licence, see source:  https://github.com/NanoAdblocker/NanoCore2/blob/master/src/snippets.js
// * For redirectable resources, see: https://github.com/NanoAdblocker/NanoCore2/tree/master/src/war
// */

grab(https://raw.githubusercontent.com/NanoAdblocker/NanoCore2/master/src/snippets.js)


// ----------------------------------------------------------------------------------------------------------------- //

// **
// * AdGuard Scriptlets integration
// * Version 1.2.5
// * source metrika-yandex-tag:  https://github.com/AdguardTeam/Scriptlets/blob/master/dist/redirect-files/metrika-yandex-tag.js
// * source metrika-yandex-watch:  https://github.com/AdguardTeam/Scriptlets/blob/master/dist/redirect-files/metrika-yandex-watch.js
// */

metrika-yandex-tag application/javascript
grab(https://raw.githubusercontent.com/AdguardTeam/Scriptlets/master/dist/redirect-files/metrika-yandex-tag.js)

metrika-yandex-watch application/javascript
grab(https://raw.githubusercontent.com/AdguardTeam/Scriptlets/master/dist/redirect-files/metrika-yandex-watch.js)

! IN TEST (ADGUARD INTEGRATION)
! lists/ðŸ’£danger_zone/resources_to_test.txt
prevent-window-open application/javascript
function preventWindowOpen(source) {
  var match = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var search = arguments.length > 2 ? arguments[2] : undefined;
  var replacement = arguments.length > 3 ? arguments[3] : undefined;
  // Default value of 'match' is needed to prevent all `window.open` calls
  // if the scriptlet is used without parameters
  var nativeOpen = window.open; // unary plus converts 'match' to a number
  // e.g.: +'1' -> 1; +false -> 0

  match = +match > 0;
  search = search ? toRegExp(search) : toRegExp('/.?/'); // eslint-disable-next-line consistent-return

  var openWrapper = function openWrapper(str) {
    if (match !== search.test(str)) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return nativeOpen.apply(window, [str].concat(args));
    }

    hit(source);
    var result; // defaults to return noopFunc instead of window.open

    if (!replacement) {
      result = noopFunc;
    } else if (replacement === 'trueFunc') {
      result = trueFunc;
    } else if (replacement.indexOf('=') > -1) {
      // We should return noopFunc instead of window.open
      // but with some property if website checks it (examples 5, 6)
      // https://github.com/AdguardTeam/Scriptlets/issues/71
      var isProp = startsWith(replacement, '{') && endsWith(replacement, '}');

      if (isProp) {
        var propertyPart = replacement.slice(1, -1);
        var propertyName = substringBefore(propertyPart, '=');
        var propertyValue = substringAfter(propertyPart, '=');

        if (propertyValue === 'noopFunc') {
          result = function result() {
            var resObj = {};
            resObj[propertyName] = noopFunc;
            return resObj;
          };
        }
      }
    }

    return result;
  };

  window.open = openWrapper;
}
preventWindowOpen.names = ['prevent-window-open', 'window.open-defuser.js', 'ubo-window.open-defuser.js'];
preventWindowOpen.injections = [toRegExp, startsWith, endsWith, substringBefore, substringAfter, hit, noopFunc, trueFunc];

