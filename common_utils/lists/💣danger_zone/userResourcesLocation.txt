# ---------------------------------------------------------------------------- #

# Extra resources for Nano Adblocker

# Same format as uBlock Origin's resources file
# Everything should be prefixed with "nano-" to prevent name collision
# However, collided names will always cause uBlock Origin's resources to be
# overridden, and can be done purposefully when intervention is required

# This file is no longer in use, the new file is located at:
# https://github.com/NanoAdblocker/NanoCore2/blob/master/src/snippets.js

# ---------------------------------------------------------------------------- #


nano-tiny-noopvast-2.0 text/xml
<VAST version="2.0"></VAST>


nano-tiny-noopvast-3.0 text/xml
<VAST version="3.0"></VAST>


# Assign a variable when the document gets ready, 2 required arguments.
# chain - The property chain.
# value - The value to assign, must be 'null', 'true', or 'false'.
nano-assign-variable-onready.js application/javascript
(function() {
    var chain = '{{1}}';
    var value = '{{2}}';
    if ( chain === '' || chain === '{{1}}' ) {
        return;
    }
    if ( value === 'null' ) {
        value = null;
    } else if ( value === 'true' ) {
        value = true;
    } else if ( value === 'false' ) {
        value = false;
    } else {
        return;
    }
    var assign = function() {
        var parent = window;
        chain = chain.split('.');
        for ( var i = 0; i < chain.length - 1; i++ ) {
            parent = parent[chain[i]];
        }
        parent[chain[chain.length - 1]] = value;
    };
    if ( document.readyState === 'interactive' ||
         document.readyState === 'complete' ) {
        assign();
    } else {
        addEventListener('DOMContentLoaded', assign);
    }
})();


# ---------------------------------------------------------------------------- #

# Specific resources


# Nothing for now...


# ---------------------------------------------------------------------------- #

# Experimental resources, these can change or break at any time


# https://github.com/jspenguin2017/uBlockProtector/issues/390
nano-vvvvid-it.js application/javascript
(function() {
    // Based on KAADIVVVV
    // License: https://github.com/Robotex/KAADIVVVV/blob/master/LICENSE
    function defuse() {
        var checkAdv = function() {
            this.hasAdv = false;
        };
        vvvvid.models.PlayerObj.prototype.checkAdv = checkAdv;
        window[wnbshgd] = vvvvid.models.PlayerObj.prototype.checkAdv;
    }
    if ( typeof vvvvid === 'object' ) {
        defuse();
    } else {
        addEventListener('DOMContentLoaded', defuse);
    }
})();


# https://github.com/uBlockOrigin/uAssets/issues/247
nano-colombiaonline-com.js application/javascript
(function() {
    var magic = 'a' + Math.random().toString(36).substring(2);
    var testScript = "typeof otab == 'function'";
    var testComment = /\d{5,} \d{1,2}/;
    //
    var getter = function() {
        var script, temp;
        //
        temp = Array.from(document.querySelectorAll(
            'script:not([src]):not([' + magic + '])'
        ));
        if (
            document.currentScript &&
            !document.currentScript.hasAttribute(magic)
        ) {
            temp.unshift(document.currentScript);
        }
        if ( temp.length === 0 ) {
            return true;
        }
        for ( var e of temp ) {
            e.setAttribute(magic, '');
            if ( e.textContent && e.textContent.includes(testScript) ) {
                script = e;
                break;
            }
        }
        //
        if ( script === undefined ) {
            return true;
        }
        var prev = script.previousSibling;
        temp = prev;
        while ( temp = temp.previousSibling ) {
            if (
                temp.nodeType === Node.COMMENT_NODE &&
                testComment.test(temp.data)
            ) {
                prev.style.setProperty('display', 'none', 'important');
                return false;
            }
        }
    };
    //
    Object.defineProperty(window, "trev", {
        set: function() { },
        get: function() {
            var r;
            var i = 0;
            do {
                try {
                    r = getter();
                } catch ( err ) { }
            } while ( i++, !r && i < 100 );
            return null;
        }
    });
    addEventListener('load', function() {
        void trev;
    });
    //
    var isInBackground = false;
    var reStart = /^\/[a-z_]+\.cms/;
    var reEnd = /^ \d{5,} \d{1,2} $/;
    var adsHidder = function() {
        if ( isInBackground || !document.body ) {
            return;
        }
        var iterator = document.createTreeWalker(
            document.body, NodeFilter.SHOW_COMMENT
        );
        var comment;
        while ( comment = iterator.nextNode() ) {
            if ( reStart.test(comment.data) ) {
                var toHide = [];
                var prev = comment;
                while ( prev = prev.previousSibling ) {
                    if (
                        prev.nodeType === Node.COMMENT_NODE &&
                        reEnd.test(prev.data)
                    ) {
                        if ( toHide.length < 15 ) {
                            for ( var e of toHide ) {
                                try {
                                    e.style.setProperty(
                                        'display', 'none', 'important'
                                    );
                                } catch ( err ) { }
                            }
                        }
                        break;
                    }
                    toHide.push(prev);
                }
            }
        }
    };
    addEventListener('focus', function() {
        isInBackground = false;
    });
    addEventListener('blur', function() {
        isInBackground = true;
    });
    setInterval(adsHidder, 1000);
})();


# Patch document.createElement and prevent created script from receiving
# network error event, 1 required argument
# url - The URL matcher of the script
nano-hijack-script-create.js application/javascript
(function() {
    var _createElement = document.createElement;
    var needle = '{{1}}';
    if ( needle === '' || needle === '{{1}}' ) {
        needle = '.?';
    } else if ( needle.length > 2 &&
                needle.startsWith('/') && needle.endsWith('/') ) {
        needle = needle.slice(1,-1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    document.createElement = function(name) {
        var elem = _createElement.apply(this, arguments);
        if ( name === 'script' ) {
            elem.addEventListener('error', function(e) {
                if ( needle.test(elem.src) ) {
                    e.preventDefault();
                    e.stopPropagation();
                    var ev = new Event('load');
                    elem.dispatchEvent(ev);
                }
            });
        }
        return elem;
    };
})();


# Remove elements when the document gets ready, 1 required argument.
# selector - The selector for elements to remove, must be a plain CSS selector,
#            pseudo-selectors are not supported.
nano-remove-elements-onready.js application/javascript
(function() {
    var selector = '{{1}}';
    if ( selector === '' || selector === '{{1}}' ) {
        return;
    }
    var remove = function() {
        var elements = document.querySelectorAll(selector);
        for ( var element of elements ) {
            element.remove();
        }
    };
    if ( document.readyState === 'interactive' ||
         document.readyState === 'complete' ) {
        remove();
    } else {
        addEventListener('DOMContentLoaded', remove);
    }
})();


# Insert an invisible elements onto the page, can be used to dodge baits,
# 1 required argument.
# identifier - An identifier, either an id or a class name. Like "#id" or
#              ".class"
nano-make-bait-element.js application/javascript
(function() {
    var identifier = '{{1}}';
    var element = document.createElement('div');
    if ( identifier.charAt(0) === '#' ) {
        element.id = identifier.substring(1);
    } else if ( identifier.charAt(0) === '.' ) {
        element.className = identifier.substring(1);
    } else {
        return;
    }
    element.style.display = 'none';
    document.documentElement.appendChild(element);
})();


# Grant fake notification permission
nano-grant-fake-notification.js application/javascript
(function() {
    Notification = function() { };
    Notification.permission = 'default';
    Notification.requestPermission = function(callback) {
        Notification.permission = 'granted';
        if ( callback ) {
            setTimeout(callback, 0, 'granted');
        }
        return Promise.resolve('granted');
    };
})();


# Prevent inline scripts with specific IDs from executing, 1 required argument
# needle - The ID matcher, can be a plain string (exact match) or a regular
#          expression
nano-abort-inline-scripts-by-id.js application/javascript
(() => {
    let needle = '{{1}}';
    if (needle === '' || needle === '{{1}}') {
        return;
    } else if (needle.startsWith('/') && needle.endsWith('/')) {
        needle = needle.slice(1, -1);
    } else {
        needle = '^' + needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + '$';
    }
    needle = new RegExp(needle);
    //
    const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            for (const node of mutation.addedNodes) {
                if (node.tagName === 'SCRIPT' && needle.test(node.id)) {
                    node.textContent = '';
                    node.remove();
                }
            }
        }
    });
    if (document.readyState === 'interactive' ||
        document.readyState === 'complete') {
        return; // Too late
    } else {
        observer.observe(document, {
            childList: true,
            subtree: true,
        });
        addEventListener('DOMContentLoaded', () => {
            observer.disconnect();
        });
    }
})();


# ---------------------------------------------------------------------------- #

# Privileged resources, these are only available to Nano Adblocker's trusted
# filter lists


# Click elements when the document gets ready, 1 required argument.
# selector - The selector for elements to remove, must be a plain CSS selector,
#            pseudo-selectors are not supported.
nanop-click-elements-onready.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var selector = '{{1}}';
    if ( selector === '' || selector === '{{1}}' ) {
        return;
    }
    var click = function() {
        var elements = document.querySelectorAll(selector);
        for ( var element of elements ) {
            element.click();
        }
    };
    if ( document.readyState === 'interactive' ||
         document.readyState === 'complete' ) {
        click();
    } else {
        addEventListener('DOMContentLoaded', click);
    }
})();


# Click elements when the document gets loaded, 1 required argument.
# selector - The selector for elements to remove, must be a plain CSS selector,
#            pseudo-selectors are not supported.
nanop-click-elements-onload.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var selector = '{{1}}';
    if ( selector === '' || selector === '{{1}}' ) {
        return;
    }
    var click = function() {
        var elements = document.querySelectorAll(selector);
        for ( var element of elements ) {
            element.click();
        }
    };
    if ( document.readyState === 'complete' ) {
        click();
    } else {
        addEventListener('load', click);
    }
})();


# Set a cookie, 1 required arguments, 3 optional arguments.
# data   - The key=value pair.
# path   - Optional, the path, default to current path.
# domain - Optional, the domain, default to current domain.
# secure - true or false. Optional, default to false.
# del    - true or false. Set to true to delete the cookie instead. Optional,
#          default to false.
nanop-easy-set-cookie.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var data = '{{1}}';
    var path = '{{2}}';
    var domain = '{{3}}';
    var secure = '{{4}}';
    var del = '{{5}}';
    if ( data.indexOf('=') === -1 ) {
        return;
    }
    if ( del === 'true' ) {
        data += ';max-age=-100';
    } else {
        data += ';max-age=2592000'; // 30 days
    }
    if ( path !== '' && path !== '{{2}}' ) {
        data += ';path=' + path;
    }
    if ( domain !== '' && domain !== '{{3}}' ) {
        data += ';domain=' + domain;
    }
    if ( secure === 'true' ) {
        data += ';secure';
    }
    document.cookie = data;
})();


# Set a cookie the hard way, 1 required argument.
# data - The cookie data to set.
nanop-set-cookie.js application/javascript
(function() {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var data = '{{1}}';
    if ( data.indexOf('=') === -1 ) {
        return;
    }
    document.cookie = data;
})();


# Redirect to a URL in GET parameter
# key - The parameter key
nanop-get-redirect.js application/javascript
(() => {
    var guard = '{{nano}}';
    if ( guard === '{{nano}}' ) {
        return;
    }
    var data = '{{1}}';
    if ( data === '' || data === '{{1}}' ) {
        return;
    }
    var url = new URL(location.href);
    var param = url.searchParams.get(data);
    if ( typeof param !== 'string' || !/^https?:\/\//.test(param) ) {
        return;
    }
    location.href = param;
})();


##############################################################################################################

#
# AdGuard Scriptlets
# Version 1.2.5
#

// source: https://github.com/AdguardTeam/Scriptlets/blob/master/dist/redirect-files/metrika-yandex-tag.js

metrika-yandex-tag  application/javascript
(function(source, args){
function metrikaYandexTag(source) {
    var asyncCallbackFromOptions = function asyncCallbackFromOptions(param) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var callback = options.callback;
      var ctx = options.ctx;

      if (typeof callback === 'function') {
        callback = ctx !== undefined ? callback.bind(ctx) : callback;
        setTimeout(function () {
          return callback();
        });
      }
    };

    var init = noopFunc;
    /**
     * https://yandex.ru/support/metrica/objects/addfileextension.html
     */

    var addFileExtension = noopFunc;
    /**
     * https://yandex.ru/support/metrica/objects/extlink.html
     */

    var extLink = asyncCallbackFromOptions;
    /**
     * https://yandex.ru/support/metrica/objects/file.html
     */

    var file = asyncCallbackFromOptions;
    /**
     * https://yandex.ru/support/metrica/objects/get-client-id.html
     * @param {Function} cb
     */

    var getClientID = function getClientID(cb) {
      setTimeout(cb(null));
    };
    /**
     * https://yandex.ru/support/metrica/objects/hit.html
     */


    var hitFunc = asyncCallbackFromOptions;
    /**
     * https://yandex.ru/support/metrica/objects/notbounce.html
     */

    var notBounce = asyncCallbackFromOptions;
    /**
     * https://yandex.ru/support/metrica/objects/params-method.html
     */

    var params = noopFunc;
    /**
     * https://yandex.ru/support/metrica/objects/reachgoal.html
     * @param {string} target
     * @param {Object} params
     * @param {Function} callback
     * @param {any} ctx
     */

    var reachGoal = function reachGoal(target, params, callback, ctx) {
      asyncCallbackFromOptions(null, {
        callback: callback,
        ctx: ctx
      });
    };
    /**
     * https://yandex.ru/support/metrica/objects/set-user-id.html
     */


    var setUserID = noopFunc;
    /**
     * https://yandex.ru/support/metrica/objects/user-params.html
     */

    var userParams = noopFunc;
    var api = {
      init: init,
      addFileExtension: addFileExtension,
      extLink: extLink,
      file: file,
      getClientID: getClientID,
      hit: hitFunc,
      notBounce: notBounce,
      params: params,
      reachGoal: reachGoal,
      setUserID: setUserID,
      userParams: userParams
    };

    function ym(id, funcName) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      return api[funcName] && api[funcName].apply(api, args);
    }

    window.ym = ym;
    hit(source);
  }
function hit(source, message) {
    if (source.verbose !== true) {
      return;
    }

    try {
      var log = console.log.bind(console);
      var trace = console.trace.bind(console);
      var prefix = source.ruleText || '';

      if (source.domainName) {
        var AG_SCRIPTLET_MARKER = '#%#//';
        var UBO_SCRIPTLET_MARKER = '##+js';
        var ruleStartIndex;

        if (source.ruleText.indexOf(AG_SCRIPTLET_MARKER) > -1) {
          ruleStartIndex = source.ruleText.indexOf(AG_SCRIPTLET_MARKER);
        } else if (source.ruleText.indexOf(UBO_SCRIPTLET_MARKER) > -1) {
          ruleStartIndex = source.ruleText.indexOf(UBO_SCRIPTLET_MARKER);
        } // delete all domains from ruleText and leave just rule part


        var rulePart = source.ruleText.slice(ruleStartIndex); // prepare applied scriptlet rule for specific domain

        prefix = "".concat(source.domainName).concat(rulePart);
      } // Used to check if scriptlet uses 'hit' function for logging


      var LOG_MARKER = 'log: ';

      if (message) {
        if (message.indexOf(LOG_MARKER) === -1) {
          log("".concat(prefix, " message:\n").concat(message));
        } else {
          log(message.slice(LOG_MARKER.length));
        }
      }

      log("".concat(prefix, " trace start"));

      if (trace) {
        trace();
      }

      log("".concat(prefix, " trace end"));
    } catch (e) {// try catch for Edge 15
      // In according to this issue https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14495220/
      // console.log throws an error
    } // This is necessary for unit-tests only!


    if (typeof window.__debug === 'function') {
      window.__debug(source);
    }
  }
function noopFunc() {};
        const updatedArgs = args ? [].concat(source).concat(args) : [source];
        metrikaYandexTag.apply(this, updatedArgs);
    
})({"name":"metrika-yandex-tag","args":[]}, []);


// source: https://github.com/AdguardTeam/Scriptlets/blob/master/dist/redirect-files/metrika-yandex-watch.js
(async function() {
  'use strict';

  // Your code here...
  const metrika-yandex-watch_fileUrl = 'https://raw.githubusercontent.com/AdguardTeam/Scriptlets/master/dist/redirect-files/metrika-yandex-watch.js'; // provide file location

  let response = await fetch(fileUrl);

  if (response.ok) { // if HTTP-status is 200-299
    // get the response body (the method explained below)
    let metrika-yandex-watch_text = await response.text();
    console.log("await zuckestionkiller = ", text);
  } else {
    console.log("HTTP-Error: " + response.status);
  }
})();


metrika-yandex-watch  application/javascript
metrika-yandex-watch_text
/*
(function(source, args){
function metrikaYandexWatch(source) {
    var cbName = 'yandex_metrika_callbacks';
    /**
     * Gets callback and its context from options and call it in async way
     * @param {Object} options Yandex Metrika API options
     */

    var asyncCallbackFromOptions = function asyncCallbackFromOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = options.callback;
      var ctx = options.ctx;

      if (typeof callback === 'function') {
        callback = ctx !== undefined ? callback.bind(ctx) : callback;
        setTimeout(function () {
          return callback();
        });
      }
    };

    function Metrika() {} // constructor
    // Methods without options


    Metrika.prototype.addFileExtension = noopFunc;
    Metrika.prototype.getClientID = noopFunc;
    Metrika.prototype.setUserID = noopFunc;
    Metrika.prototype.userParams = noopFunc; // Methods with options
    // The order of arguments should be kept in according to API

    Metrika.prototype.extLink = function (url, options) {
      asyncCallbackFromOptions(options);
    };

    Metrika.prototype.file = function (url, options) {
      asyncCallbackFromOptions(options);
    };

    Metrika.prototype.hit = function (url, options) {
      asyncCallbackFromOptions(options);
    };

    Metrika.prototype.reachGoal = function (target, params, cb, ctx) {
      asyncCallbackFromOptions({
        callback: cb,
        ctx: ctx
      });
    };

    Metrika.prototype.notBounce = asyncCallbackFromOptions;

    if (window.Ya) {
      window.Ya.Metrika = Metrika;
    } else {
      window.Ya = {
        Metrika: Metrika
      };
    }

    if (window[cbName] && Array.isArray(window[cbName])) {
      window[cbName].forEach(function (func) {
        if (typeof func === 'function') {
          func();
        }
      });
    }

    hit(source);
  }
function hit(source, message) {
    if (source.verbose !== true) {
      return;
    }

    try {
      var log = console.log.bind(console);
      var trace = console.trace.bind(console);
      var prefix = source.ruleText || '';

      if (source.domainName) {
        var AG_SCRIPTLET_MARKER = '#%#//';
        var UBO_SCRIPTLET_MARKER = '##+js';
        var ruleStartIndex;

        if (source.ruleText.indexOf(AG_SCRIPTLET_MARKER) > -1) {
          ruleStartIndex = source.ruleText.indexOf(AG_SCRIPTLET_MARKER);
        } else if (source.ruleText.indexOf(UBO_SCRIPTLET_MARKER) > -1) {
          ruleStartIndex = source.ruleText.indexOf(UBO_SCRIPTLET_MARKER);
        } // delete all domains from ruleText and leave just rule part


        var rulePart = source.ruleText.slice(ruleStartIndex); // prepare applied scriptlet rule for specific domain

        prefix = "".concat(source.domainName).concat(rulePart);
      } // Used to check if scriptlet uses 'hit' function for logging


      var LOG_MARKER = 'log: ';

      if (message) {
        if (message.indexOf(LOG_MARKER) === -1) {
          log("".concat(prefix, " message:\n").concat(message));
        } else {
          log(message.slice(LOG_MARKER.length));
        }
      }

      log("".concat(prefix, " trace start"));

      if (trace) {
        trace();
      }

      log("".concat(prefix, " trace end"));
    } catch (e) {// try catch for Edge 15
      // In according to this issue https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14495220/
      // console.log throws an error
    } // This is necessary for unit-tests only!


    if (typeof window.__debug === 'function') {
      window.__debug(source);
    }
  }
function noopFunc() {};
        const updatedArgs = args ? [].concat(source).concat(args) : [source];
        metrikaYandexWatch.apply(this, updatedArgs);
    
})({"name":"metrika-yandex-watch","args":[]}, []);
*/
